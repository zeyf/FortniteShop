{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ZainY\\\\Documents\\\\fortniteitemshop\\\\fortniteapp\\\\src\\\\components\\\\Set\\\\Set.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport SetContext from '../context/SetContext/SetContext';\nimport ItemSet from '../Item/ItemDetailsSection/Item Details Components/Item Set/ItemSet';\nimport Spinner from '../layout/spinner/Spinner';\nimport { Link } from 'react-router-dom';\nimport './Set.css';\n\nconst Set = ({\n  match\n}) => {\n  _s();\n\n  const setContext = useContext(SetContext);\n  useEffect(() => {\n    setContext.GetSet(match.params.setname); //eslint-disable-next-line\n  }, []);\n  const {\n    SetName,\n    SetInfo,\n    loading,\n    CardRarityStyles\n  } = setContext;\n  {\n    SetInfo && console.log(SetInfo);\n  }\n\n  const SetRarity = () => {\n    if (SetInfo) {\n      const CardType = SetInfo.map((item, i) => {\n        const raritytype = item.rarity.displayValue;\n\n        if (raritytype === 'Uncommon') {\n          return CardRarityStyles.uncommon;\n        } else if (raritytype === 'Epic') {\n          return CardRarityStyles.epic;\n        } else if (raritytype === 'Rare') {\n          return CardRarityStyles.rare;\n        } else if (raritytype === 'Icon Series') {\n          return CardRarityStyles.iconseries;\n        } else if (raritytype === 'Slurp Series') {\n          return CardRarityStyles.slurpseries;\n        } else if (raritytype === 'DARK SERIES') {\n          return CardRarityStyles.dark;\n        } else if (raritytype === 'Legendary') {\n          return CardRarityStyles.legendary;\n        }\n      });\n      return CardType;\n    }\n  };\n\n  SetLinkByIDType: () => {\n    if (iContext.item) {\n      if (iContext.ItemsOfSameSet) {\n        const returntype = iContext.ItemsOfSameSet.map((item, i) => {\n          const itemtype = item.id.split('_')[0];\n\n          if (itemtype === 'CID') {\n            return iContext.ItemTypes.skin;\n          } else if (itemtype === 'EID') {\n            return iContext.ItemTypes.emote;\n          } else if (itemtype === 'MusicPack') {\n            return iContext.ItemTypes.musicpack;\n          } else if (itemtype === 'Pickaxe') {\n            return iContext.ItemTypes.pickaxe;\n          } else if (itemtype === 'Wrap') {\n            return iContext.ItemTypes.wrap;\n          } else if (itemtype === 'Glider') {\n            return iContext.ItemTypes.glider;\n          } else if (itemtype === 'BID') {\n            return iContext.ItemTypes.backbling;\n          }\n        }); //eslint-disable-next-line\n\n        return returntype;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"g\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"set set--primary\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setsection setsection--primary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"set__head\",\n            children: [\"THE \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#ffe227'\n              },\n              children: [SetName, \" SET\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this), \" (\", SetInfo && SetInfo.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"setitemcontainer setitemcontainer--primary\",\n            children: SetInfo && SetInfo.map((item, i) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"setitemcard setitemcard--primary\",\n                style: SetRarity()[i],\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: item.images.icon,\n                  style: {\n                    height: '150px',\n                    width: '150px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 36\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Set, \"x9ZGySz18t8eqCAA7+rkIrsi2iw=\");\n\n_c = Set;\nexport default Set;\n\nvar _c;\n\n$RefreshReg$(_c, \"Set\");","map":{"version":3,"sources":["C:/Users/ZainY/Documents/fortniteitemshop/fortniteapp/src/components/Set/Set.js"],"names":["React","useContext","useEffect","SetContext","ItemSet","Spinner","Link","Set","match","setContext","GetSet","params","setname","SetName","SetInfo","loading","CardRarityStyles","console","log","SetRarity","CardType","map","item","i","raritytype","rarity","displayValue","uncommon","epic","rare","iconseries","slurpseries","dark","legendary","SetLinkByIDType","iContext","ItemsOfSameSet","returntype","itemtype","id","split","ItemTypes","skin","emote","musicpack","pickaxe","wrap","glider","backbling","color","length","images","icon","height","width"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from 'react'\r\nimport SetContext from '../context/SetContext/SetContext';\r\nimport ItemSet from '../Item/ItemDetailsSection/Item Details Components/Item Set/ItemSet'\r\nimport Spinner from '../layout/spinner/Spinner';\r\nimport {Link} from 'react-router-dom'\r\nimport './Set.css'\r\n\r\nconst Set = ({match}) => {\r\n\r\n    const setContext = useContext(SetContext);\r\n    useEffect(() => {\r\n       setContext.GetSet(match.params.setname)\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    const {SetName, SetInfo, loading, CardRarityStyles} = setContext;\r\n    {SetInfo && console.log(SetInfo)}\r\n\r\n\r\n    const SetRarity = () => {\r\n        if (SetInfo) {\r\n                const CardType = SetInfo.map((item, i) => {\r\n                    \r\n                    const raritytype = item.rarity.displayValue;\r\n                    \r\n                    if(raritytype === 'Uncommon') {\r\n                        return CardRarityStyles.uncommon;\r\n                    } else if (raritytype === 'Epic') {\r\n                        return CardRarityStyles.epic;\r\n                    } else if (raritytype === 'Rare') {\r\n                        return CardRarityStyles.rare;\r\n                    } else if (raritytype === 'Icon Series') {\r\n                        return CardRarityStyles.iconseries;\r\n                    } else if (raritytype === 'Slurp Series') {\r\n                        return CardRarityStyles.slurpseries;\r\n                    } else if (raritytype === 'DARK SERIES') {\r\n                        return CardRarityStyles.dark;\r\n                    } else if (raritytype === 'Legendary') {\r\n                        return CardRarityStyles.legendary;\r\n                    }\r\n                    \r\n                })\r\n                return CardType\r\n            }\r\n    }\r\n\r\n    SetLinkByIDType: () => {\r\n\r\n        if (iContext.item) {\r\n            if (iContext.ItemsOfSameSet) {\r\n\r\n                const returntype = iContext.ItemsOfSameSet.map((item, i) => {\r\n\r\n                    \r\n\r\n                    const itemtype = item.id.split('_')[0];\r\n\r\n                    \r\n                    if (itemtype === 'CID') {\r\n                        return iContext.ItemTypes.skin;\r\n                    } else if (itemtype === 'EID') {\r\n                        return iContext.ItemTypes.emote;\r\n                    } else if (itemtype === 'MusicPack') {\r\n                        return iContext.ItemTypes.musicpack;\r\n                    } else if (itemtype === 'Pickaxe') {\r\n                        return iContext.ItemTypes.pickaxe;\r\n                    } else if (itemtype === 'Wrap') {\r\n                        return iContext.ItemTypes.wrap;\r\n                    } else if (itemtype === 'Glider') {\r\n                        return iContext.ItemTypes.glider;\r\n                    } else if (itemtype === 'BID') {\r\n                        return iContext.ItemTypes.backbling\r\n                    }\r\n                })\r\n                //eslint-disable-next-line\r\n                return returntype;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='g'>\r\n\r\n            <div className='set set--primary'>\r\n                {loading ? <Spinner /> :  <>\r\n                <div className=\"setsection setsection--primary\">\r\n\r\n                    <h2 className=\"set__head\">\r\n                        THE <span style={{color: '#ffe227'}}>{SetName} SET</span> ({SetInfo && SetInfo.length})\r\n                    </h2>\r\n                    <div className=\"setitemcontainer setitemcontainer--primary\">\r\n                        {SetInfo && SetInfo.map((item, i) => {\r\n                            \r\n                            return <div className='setitemcard setitemcard--primary' style={SetRarity()[i]}>\r\n                                        <img src={item.images.icon} style={{height: '150px', width: '150px'}} />\r\n                                    </div>\r\n                            \r\n                        })}\r\n                    </div>\r\n                </div>\r\n                </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Set\r\n"]},"metadata":{},"sourceType":"module"}