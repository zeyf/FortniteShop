{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ZainY\\\\Documents\\\\fortniteitemshop\\\\fortniteapp\\\\src\\\\components\\\\context\\\\SetContext\\\\SetState.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport SetReducer from './SetReducer';\nimport SetContext from './SetContext';\nimport { SET_LOADING, GET_SET, SET_NAME } from '../types';\nimport axios from 'axios';\n\nconst SetState = props => {\n  _s();\n\n  const InitialState = {\n    SetInfo: null,\n    SetName: null,\n    loading: false\n  };\n  const [state, dispatch] = useReducer(SetReducer, InitialState);\n\n  const SetLoading = () => {\n    dispatch({\n      type: SET_LOADING\n    });\n  };\n\n  const GetSet = async setname => {\n    console.log(setname);\n\n    const NameCharacterHandler = () => {\n      // handles names with dashes (which are passed in with ~ instead)\n      const spaceregex = /-/gi;\n      const tilderegex = /~/gi;\n\n      if (dashregex.test(setname) === true && tilderegex.test(setname) === false) {\n        const NameDashResult = setname.replaceAll(dashregex, ' ');\n        return NameDashResult;\n      } else if (tilderegex.test(setname) === true && dashregex.test(setname) === false) {\n        const NameTildeResult = setname.replaceAll(tilderegex, '-');\n        return NameTildeResult;\n      } else if (tilderegex.test(setname) === true && dashregex.test(setname) === true) {\n        const replacedash = setname.replaceAll(dashregex, ' ');\n        const replacetilde = replacedash.replaceAll(tilderegex, '-');\n        return replacetilde;\n      } else {\n        return setname;\n      }\n    };\n\n    console.log(NameCharacterHandler());\n    const response = await axios.get(`https://fortnite-api.com/v2/cosmetics/br/search/all?set=${NameCharacterHandler()}`);\n    dispatch({\n      type: GET_SET,\n      payload: response.data.data\n    });\n    dispatch({\n      type: SET_NAME,\n      payload: setname.toUpperCase()\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SetContext.Provider, {\n    value: {\n      SetInfo: state.SetInfo,\n      SetName: state.SetName,\n      loading: state.loading,\n      GetSet\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 12\n  }, this);\n};\n\n_s(SetState, \"t2YXRAGqQS0gK432FYC+SFA/j9s=\");\n\n_c = SetState;\nexport default SetState;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetState\");","map":{"version":3,"sources":["C:/Users/ZainY/Documents/fortniteitemshop/fortniteapp/src/components/context/SetContext/SetState.js"],"names":["useReducer","SetReducer","SetContext","SET_LOADING","GET_SET","SET_NAME","axios","SetState","props","InitialState","SetInfo","SetName","loading","state","dispatch","SetLoading","type","GetSet","setname","console","log","NameCharacterHandler","spaceregex","tilderegex","dashregex","test","NameDashResult","replaceAll","NameTildeResult","replacedash","replacetilde","response","get","payload","data","toUpperCase","children"],"mappings":"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","sourcesContent":["import {useReducer} from 'react';\r\nimport SetReducer from './SetReducer';\r\nimport SetContext from './SetContext';\r\nimport {SET_LOADING, GET_SET, SET_NAME} from '../types';\r\nimport axios from 'axios';\r\n\r\nconst SetState = (props) => {\r\n\r\n    const InitialState = {\r\n        SetInfo: null,\r\n        SetName: null,\r\n        loading: false\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(SetReducer, InitialState);\r\n\r\n    const SetLoading = () => {\r\n        dispatch({type: SET_LOADING});\r\n    }\r\n\r\n    const GetSet = async (setname) => {\r\n        console.log(setname)\r\n\r\n        const NameCharacterHandler = () => {\r\n            // handles names with dashes (which are passed in with ~ instead)\r\n            const spaceregex = /-/gi;\r\n            const tilderegex = /~/gi;\r\n            if (dashregex.test(setname) === true && tilderegex.test(setname) === false) {\r\n                const NameDashResult = setname.replaceAll(dashregex, ' ')\r\n                return NameDashResult\r\n            } else if (tilderegex.test(setname) === true && dashregex.test(setname) === false) {\r\n                const NameTildeResult = setname.replaceAll(tilderegex, '-')\r\n                return NameTildeResult\r\n            } else if (tilderegex.test(setname) === true && dashregex.test(setname) === true) {\r\n                const replacedash = setname.replaceAll(dashregex, ' ');\r\n                const replacetilde = replacedash.replaceAll(tilderegex, '-');\r\n                return replacetilde\r\n            } else {\r\n                return setname\r\n            }\r\n        }\r\n        console.log(NameCharacterHandler())\r\n\r\n\r\n        const response = await axios.get(`https://fortnite-api.com/v2/cosmetics/br/search/all?set=${NameCharacterHandler()}`)\r\n\r\n\r\n        \r\n\r\n        dispatch({\r\n            type: GET_SET,\r\n            payload: response.data.data\r\n        })\r\n\r\n        dispatch({\r\n            type: SET_NAME,\r\n            payload: setname.toUpperCase()\r\n        })\r\n    }\r\n\r\n    \r\n\r\n\r\n    return <SetContext.Provider value={{\r\n\r\n        SetInfo: state.SetInfo,\r\n        SetName: state.SetName,\r\n        loading: state.loading,\r\n        GetSet\r\n        \r\n            }}>\r\n\r\n\r\n\r\n                {props.children}\r\n\r\n\r\n            </SetContext.Provider>\r\n}\r\n\r\n\r\nexport default SetState"]},"metadata":{},"sourceType":"module"}