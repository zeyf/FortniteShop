{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ZainY\\\\Documents\\\\fortniteitemshop\\\\fortniteapp\\\\src\\\\components\\\\Set\\\\Set.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport SetContext from '../context/SetContext/SetContext';\n\nconst Set = ({\n  match\n}) => {\n  _s();\n\n  const setContext = useContext(SetContext);\n\n  const CleanParams = () => {\n    const param = match.params.param;\n    const dashregex = /-/gi;\n    const spaceregex = /\\s/gi;\n\n    if (dashregex.test(param) === true && spaceregex.test(param) === false) {\n      const NameDashResult = param.replaceAll(dashregex, ' ');\n      return NameDashResult;\n    } else if (spaceregex.test(param) === true && dashregex.test(param) === false) {\n      const NameTildeResult = param.replaceAll(spaceregex, '-');\n      return NameTildeResult;\n    } else if (spaceregex.test(param) === true && dashregex.test(param) === true) {\n      const replacedash = param.replaceAll(dashregex, ' ');\n      const replacetilde = replacedash.replaceAll(spaceregex, '-');\n      return replacetilde;\n    } else {\n      return param;\n    }\n  };\n\n  useEffect(() => {\n    setContext.GetSet(CleanParams()); //eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Set, \"x9ZGySz18t8eqCAA7+rkIrsi2iw=\");\n\n_c = Set;\nexport default Set;\n\nvar _c;\n\n$RefreshReg$(_c, \"Set\");","map":{"version":3,"sources":["C:/Users/ZainY/Documents/fortniteitemshop/fortniteapp/src/components/Set/Set.js"],"names":["React","useContext","useEffect","SetContext","Set","match","setContext","CleanParams","param","params","dashregex","spaceregex","test","NameDashResult","replaceAll","NameTildeResult","replacedash","replacetilde","GetSet"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAGA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AAErB,QAAMC,UAAU,GAAGL,UAAU,CAACE,UAAD,CAA7B;;AAEA,QAAMI,WAAW,GAAG,MAAM;AACtB,UAAMC,KAAK,GAAGH,KAAK,CAACI,MAAN,CAAaD,KAA3B;AACA,UAAME,SAAS,GAAG,KAAlB;AACA,UAAMC,UAAU,GAAG,MAAnB;;AAEI,QAAID,SAAS,CAACE,IAAV,CAAeJ,KAAf,MAA0B,IAA1B,IAAkCG,UAAU,CAACC,IAAX,CAAgBJ,KAAhB,MAA2B,KAAjE,EAAwE;AACpE,YAAMK,cAAc,GAAGL,KAAK,CAACM,UAAN,CAAiBJ,SAAjB,EAA4B,GAA5B,CAAvB;AACA,aAAOG,cAAP;AACH,KAHD,MAGO,IAAIF,UAAU,CAACC,IAAX,CAAgBJ,KAAhB,MAA2B,IAA3B,IAAmCE,SAAS,CAACE,IAAV,CAAeJ,KAAf,MAA0B,KAAjE,EAAwE;AAC3E,YAAMO,eAAe,GAAGP,KAAK,CAACM,UAAN,CAAiBH,UAAjB,EAA6B,GAA7B,CAAxB;AACA,aAAOI,eAAP;AACH,KAHM,MAGA,IAAIJ,UAAU,CAACC,IAAX,CAAgBJ,KAAhB,MAA2B,IAA3B,IAAmCE,SAAS,CAACE,IAAV,CAAeJ,KAAf,MAA0B,IAAjE,EAAuE;AAC1E,YAAMQ,WAAW,GAAGR,KAAK,CAACM,UAAN,CAAiBJ,SAAjB,EAA4B,GAA5B,CAApB;AACA,YAAMO,YAAY,GAAGD,WAAW,CAACF,UAAZ,CAAuBH,UAAvB,EAAmC,GAAnC,CAArB;AACA,aAAOM,YAAP;AACH,KAJM,MAIA;AACH,aAAOT,KAAP;AACH;AACR,GAlBD;;AAoBAN,EAAAA,SAAS,CAAC,MAAM;AACbI,IAAAA,UAAU,CAACY,MAAX,CAAkBX,WAAW,EAA7B,EADa,CAEZ;AACH,GAHQ,EAGN,EAHM,CAAT;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAnCD;;GAAMH,G;;KAAAA,G;AAqCN,eAAeA,GAAf","sourcesContent":["import React, {useContext, useEffect} from 'react'\r\nimport SetContext from '../context/SetContext/SetContext';\r\n\r\n\r\nconst Set = ({match}) => {\r\n\r\n    const setContext = useContext(SetContext);\r\n\r\n    const CleanParams = () => {\r\n        const param = match.params.param\r\n        const dashregex = /-/gi;\r\n        const spaceregex = /\\s/gi;\r\n\r\n            if (dashregex.test(param) === true && spaceregex.test(param) === false) {\r\n                const NameDashResult = param.replaceAll(dashregex, ' ')\r\n                return NameDashResult\r\n            } else if (spaceregex.test(param) === true && dashregex.test(param) === false) {\r\n                const NameTildeResult = param.replaceAll(spaceregex, '-')\r\n                return NameTildeResult\r\n            } else if (spaceregex.test(param) === true && dashregex.test(param) === true) {\r\n                const replacedash = param.replaceAll(dashregex, ' ');\r\n                const replacetilde = replacedash.replaceAll(spaceregex, '-');\r\n                return replacetilde\r\n            } else {\r\n                return param\r\n            }\r\n    }\r\n    \r\n    useEffect(() => {\r\n       setContext.GetSet(CleanParams())\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Set\r\n"]},"metadata":{},"sourceType":"module"}