{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ZainY\\\\Documents\\\\fortniteitemshop\\\\fortniteapp\\\\src\\\\components\\\\Set\\\\Set.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport SetContext from '../context/SetContext/SetContext';\n\nconst Set = ({\n  match\n}) => {\n  _s();\n\n  const setContext = useContext(SetContext);\n\n  const CleanParams = () => {\n    const param = match.params.setname;\n    const dashregex = /-/gi;\n    const tilderegex = /~/gi;\n\n    if (spaceregex.test(name) === true && dashregex.test(name) === false) {\n      const SpaceReplaceResult = name.replaceAll(spaceregex, '-').toLowerCase();\n      return SpaceReplaceResult;\n    } else if (dashregex.test(name) === true && spaceregex.test(name) === false) {\n      const DashReplaceResult = name.replaceAll(dashregex, '~').toLowerCase();\n      return DashReplaceResult;\n    } else if (dashregex.test(name) === true && spaceregex.test(name) === true) {\n      const DashReplaceResult = name.replaceAll(dashregex, '~').toLowerCase();\n      const ReplaceSpacesToo = DashReplaceResult.replaceAll(spaceregex, '-');\n      console.log(ReplaceSpacesToo);\n      return ReplaceSpacesToo;\n    } else {\n      return name.toLowerCase();\n    }\n  };\n\n  useEffect(() => {\n    setContext.GetSet(CleanParams());\n    console.log(setContext.SetName); //eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: setContext.SetInfo && setContext.SetInfo.map((item, i) => {\n      return item.name;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Set, \"x9ZGySz18t8eqCAA7+rkIrsi2iw=\");\n\n_c = Set;\nexport default Set;\n\nvar _c;\n\n$RefreshReg$(_c, \"Set\");","map":{"version":3,"sources":["C:/Users/ZainY/Documents/fortniteitemshop/fortniteapp/src/components/Set/Set.js"],"names":["React","useContext","useEffect","SetContext","Set","match","setContext","CleanParams","param","params","setname","dashregex","tilderegex","spaceregex","test","name","SpaceReplaceResult","replaceAll","toLowerCase","DashReplaceResult","ReplaceSpacesToo","console","log","GetSet","SetName","SetInfo","map","item","i"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAGA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AAErB,QAAMC,UAAU,GAAGL,UAAU,CAACE,UAAD,CAA7B;;AAEA,QAAMI,WAAW,GAAG,MAAM;AACtB,UAAMC,KAAK,GAAGH,KAAK,CAACI,MAAN,CAAaC,OAA3B;AACA,UAAMC,SAAS,GAAG,KAAlB;AACA,UAAMC,UAAU,GAAG,KAAnB;;AACA,QAAIC,UAAU,CAACC,IAAX,CAAgBC,IAAhB,MAA0B,IAA1B,IAAkCJ,SAAS,CAACG,IAAV,CAAeC,IAAf,MAAyB,KAA/D,EAAsE;AAClE,YAAMC,kBAAkB,GAAGD,IAAI,CAACE,UAAL,CAAgBJ,UAAhB,EAA4B,GAA5B,EAAiCK,WAAjC,EAA3B;AACA,aAAOF,kBAAP;AAEH,KAJD,MAIO,IAAIL,SAAS,CAACG,IAAV,CAAeC,IAAf,MAAyB,IAAzB,IAAiCF,UAAU,CAACC,IAAX,CAAgBC,IAAhB,MAA0B,KAA/D,EAAsE;AACzE,YAAMI,iBAAiB,GAAGJ,IAAI,CAACE,UAAL,CAAgBN,SAAhB,EAA2B,GAA3B,EAAgCO,WAAhC,EAA1B;AACA,aAAOC,iBAAP;AAEH,KAJM,MAIA,IAAGR,SAAS,CAACG,IAAV,CAAeC,IAAf,MAAyB,IAAzB,IAAiCF,UAAU,CAACC,IAAX,CAAgBC,IAAhB,MAA0B,IAA9D,EAAoE;AACvE,YAAMI,iBAAiB,GAAGJ,IAAI,CAACE,UAAL,CAAgBN,SAAhB,EAA2B,GAA3B,EAAgCO,WAAhC,EAA1B;AACA,YAAME,gBAAgB,GAAGD,iBAAiB,CAACF,UAAlB,CAA6BJ,UAA7B,EAAyC,GAAzC,CAAzB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,gBAAZ;AACA,aAAOA,gBAAP;AACH,KALM,MAKA;AACH,aAAOL,IAAI,CAACG,WAAL,EAAP;AACH;AACJ,GApBD;;AAsBAhB,EAAAA,SAAS,CAAC,MAAM;AACbI,IAAAA,UAAU,CAACiB,MAAX,CAAkBhB,WAAW,EAA7B;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAU,CAACkB,OAAvB,EAFa,CAGZ;AACH,GAJQ,EAIN,EAJM,CAAT;AAOA,sBACI;AAAA,cACKlB,UAAU,CAACmB,OAAX,IAAsBnB,UAAU,CAACmB,OAAX,CAAmBC,GAAnB,CAAuB,CAACC,IAAD,EAAOC,CAAP,KAAa;AACvD,aAAOD,IAAI,CAACZ,IAAZ;AACH,KAFsB;AAD3B;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAxCD;;GAAMX,G;;KAAAA,G;AA0CN,eAAeA,GAAf","sourcesContent":["import React, {useContext, useEffect} from 'react'\r\nimport SetContext from '../context/SetContext/SetContext';\r\n\r\n\r\nconst Set = ({match}) => {\r\n\r\n    const setContext = useContext(SetContext);\r\n\r\n    const CleanParams = () => {\r\n        const param = match.params.setname\r\n        const dashregex = /-/gi;\r\n        const tilderegex = /~/gi;\r\n        if (spaceregex.test(name) === true && dashregex.test(name) === false) {\r\n            const SpaceReplaceResult = name.replaceAll(spaceregex, '-').toLowerCase()\r\n            return SpaceReplaceResult;\r\n\r\n        } else if (dashregex.test(name) === true && spaceregex.test(name) === false) { \r\n            const DashReplaceResult = name.replaceAll(dashregex, '~').toLowerCase()\r\n            return DashReplaceResult\r\n\r\n        } else if(dashregex.test(name) === true && spaceregex.test(name) === true) {\r\n            const DashReplaceResult = name.replaceAll(dashregex, '~').toLowerCase()\r\n            const ReplaceSpacesToo = DashReplaceResult.replaceAll(spaceregex, '-')\r\n            console.log(ReplaceSpacesToo)\r\n            return ReplaceSpacesToo\r\n        } else {\r\n            return name.toLowerCase();\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n       setContext.GetSet(CleanParams())\r\n       console.log(setContext.SetName)\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {setContext.SetInfo && setContext.SetInfo.map((item, i) => {\r\n                return item.name\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Set\r\n"]},"metadata":{},"sourceType":"module"}