{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ZainY\\\\Documents\\\\fortniteitemshop\\\\fortniteapp\\\\src\\\\components\\\\Item\\\\ItemDetailsSection\\\\Item Details Components\\\\Item Set\\\\ItemSet.js\",\n    _s = $RefreshSig$();\n\nimport ItemContext from '../../../../context/ItemContext/ItemContext';\nimport './ItemSet.css';\nimport { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport Item from '../../../Item';\n\nconst ItemSet = ({\n  key\n}) => {\n  _s();\n\n  const iContext = useContext(ItemContext);\n  const [dummy, setDummy] = useState(0);\n  const BoilerPlate = {\n    CardStyle: () => {\n      if (iContext.item) {\n        const itemrarity = iContext.item.rarity.displayValue;\n\n        if (itemrarity === 'Uncommon') {\n          return iContext.CardRarityStyles.uncommon;\n        } else if (itemrarity === 'Epic') {\n          return iContext.CardRarityStyles.epic;\n        } else if (itemrarity === 'Rare') {\n          return iContext.CardRarityStyles.rare;\n        } else if (itemrarity === 'Icon Series') {\n          return iContext.CardRarityStyles.iconseries;\n        } else if (itemrarity === 'Slurp Series') {\n          return iContext.CardRarityStyles.slurpseries;\n        } else if (itemrarity === 'DARK SERIES') {\n          return iContext.CardRarityStyles.dark;\n        } else if (itemrarity === 'Legendary') {\n          return iContext.CardRarityStyles.legendary;\n        }\n      }\n    },\n    SetLinkByIDType: () => {\n      if (iContext.item) {\n        if (iContext.ItemsOfSameSet) {\n          const returntype = iContext.ItemsOfSameSet.map((item, i) => {\n            const itemtype = item.id.split('_')[0];\n\n            if (itemtype === 'CID') {\n              return iContext.ItemTypes.skin;\n            } else if (itemtype === 'EID') {\n              return iContext.ItemTypes.emote;\n            } else if (itemtype === 'MusicPack') {\n              return iContext.ItemTypes.musicpack;\n            } else if (itemtype === 'Pickaxe') {\n              return iContext.ItemTypes.pickaxe;\n            } else if (itemtype === 'Wrap') {\n              return iContext.ItemTypes.wrap;\n            } else if (itemtype === 'Glider') {\n              return iContext.ItemTypes.glider;\n            } else if (itemtype === 'BID') {\n              return iContext.ItemTypes.backbling;\n            }\n          });\n          return returntype;\n        }\n      }\n    },\n    useForceUpdate: () => {}\n  };\n  const SetFunctions = {\n    GetSet: () => {\n      if (iContext.item) {\n        if (iContext.item.set) {\n          const {\n            value\n          } = iContext.item.set;\n          iContext.GetItemSet(value);\n        }\n      }\n    },\n    SetInfo: {\n      CardStyle: () => {},\n      SetName: () => {\n        if (iContext.item) {\n          if (iContext.item.set) {\n            const {\n              value\n            } = iContext.item.set;\n            return value.toUpperCase();\n          }\n        }\n      },\n      SetLength: () => {\n        if (iContext.item) {\n          if (iContext.ItemsOfSameSet) {\n            return iContext.ItemsOfSameSet.length;\n          }\n        }\n      },\n      SetImages: () => {\n        if (iContext.item) {\n          if (iContext.ItemsOfSameSet) {\n            const Images = iContext.ItemsOfSameSet.map((item, i) => {\n              if (item.images.featured) {\n                return item.images.featured;\n              } else {\n                return item.images.icon;\n              }\n            });\n            return Images;\n          }\n        }\n      },\n      SetRarity: () => {\n        if (iContext.item) {\n          if (iContext.ItemsOfSameSet) {\n            const Images = iContext.ItemsOfSameSet.map((item, i) => {\n              const raritytype = item.rarity.displayValue;\n\n              if (raritytype === 'Uncommon') {\n                return iContext.CardRarityStyles.uncommon;\n              } else if (raritytype === 'Epic') {\n                return iContext.CardRarityStyles.epic;\n              } else if (raritytype === 'Rare') {\n                return iContext.CardRarityStyles.rare;\n              } else if (raritytype === 'Icon Series') {\n                return iContext.CardRarityStyles.iconseries;\n              } else if (raritytype === 'Slurp Series') {\n                return iContext.CardRarityStyles.slurpseries;\n              } else if (raritytype === 'DARK SERIES') {\n                return iContext.CardRarityStyles.dark;\n              } else if (raritytype === 'Legendary') {\n                return iContext.CardRarityStyles.legendary;\n              }\n            });\n            return Images;\n          }\n        }\n      },\n      SetItemName: () => {\n        if (iContext.item) {\n          if (iContext.ItemsOfSameSet) {\n            const name = iContext.ItemsOfSameSet.map((item, i) => {\n              const {\n                name\n              } = item;\n              const spaceregex = /\\s/gi;\n              const dashregex = /-/gi;\n\n              if (spaceregex.test(name)) {\n                const SpaceReplaceResult = name.replaceAll(spaceregex, '-').toLowerCase();\n                return SpaceReplaceResult;\n              } else if (dashregex.test(name)) {\n                const DashReplaceResult = name.replaceAll(dashregex, '~').toLowerCase();\n                return DashReplaceResult;\n              } else {\n                return name.toLowerCase();\n              }\n            });\n            return name;\n          }\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    SetFunctions.GetSet();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"itemsetsection itemsetsection--primary\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"itemsetsection__head\",\n      children: [\"PART OF THE \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#ffe227'\n        },\n        children: [SetFunctions.SetInfo.SetName(), \" SET\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }, this), \" (\", SetFunctions.SetInfo.SetLength(), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemset itemset--primary\",\n      children: iContext.ItemsOfSameSet && SetFunctions.SetInfo.SetImages().map((item, i) => {\n        if (i < 6) {\n          return /*#__PURE__*/_jsxDEV(Link, {\n            to: `/${BoilerPlate.SetLinkByIDType()[i]}/${SetFunctions.SetInfo.SetItemName()[i]}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"setitemcard setitemcard--primary\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: item,\n                className: \"setitemcard__image\",\n                style: SetFunctions.SetInfo.SetRarity()[i]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 33\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ItemSet, \"W/8HsYaHDga1hNGDg5b6RsQbWSc=\");\n\n_c = ItemSet;\nexport default ItemSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemSet\");","map":{"version":3,"sources":["C:/Users/ZainY/Documents/fortniteitemshop/fortniteapp/src/components/Item/ItemDetailsSection/Item Details Components/Item Set/ItemSet.js"],"names":["ItemContext","useEffect","useState","useContext","Link","Item","ItemSet","key","iContext","dummy","setDummy","BoilerPlate","CardStyle","item","itemrarity","rarity","displayValue","CardRarityStyles","uncommon","epic","rare","iconseries","slurpseries","dark","legendary","SetLinkByIDType","ItemsOfSameSet","returntype","map","i","itemtype","id","split","ItemTypes","skin","emote","musicpack","pickaxe","wrap","glider","backbling","useForceUpdate","SetFunctions","GetSet","set","value","GetItemSet","SetInfo","SetName","toUpperCase","SetLength","length","SetImages","Images","images","featured","icon","SetRarity","raritytype","SetItemName","name","spaceregex","dashregex","test","SpaceReplaceResult","replaceAll","toLowerCase","DashReplaceResult","color"],"mappings":";;;;;AAAA,OAAOA,WAAP,MAAwB,6CAAxB;AACA,OAAO,eAAP;AACA,SAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA8C,OAA9C;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAAA;;AAEvB,QAAMC,QAAQ,GAAGL,UAAU,CAACH,WAAD,CAA3B;AAEA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMS,WAAW,GAAG;AAChBC,IAAAA,SAAS,EAAE,MAAM;AACb,UAAIJ,QAAQ,CAACK,IAAb,EAAmB;AACf,cAAMC,UAAU,GAAGN,QAAQ,CAACK,IAAT,CAAcE,MAAd,CAAqBC,YAAxC;;AAEA,YAAGF,UAAU,KAAK,UAAlB,EAA8B;AAC1B,iBAAON,QAAQ,CAACS,gBAAT,CAA0BC,QAAjC;AACH,SAFD,MAEO,IAAIJ,UAAU,KAAK,MAAnB,EAA2B;AAC9B,iBAAON,QAAQ,CAACS,gBAAT,CAA0BE,IAAjC;AACH,SAFM,MAEA,IAAIL,UAAU,KAAK,MAAnB,EAA2B;AAC9B,iBAAON,QAAQ,CAACS,gBAAT,CAA0BG,IAAjC;AACH,SAFM,MAEA,IAAIN,UAAU,KAAK,aAAnB,EAAkC;AACrC,iBAAON,QAAQ,CAACS,gBAAT,CAA0BI,UAAjC;AACH,SAFM,MAEA,IAAIP,UAAU,KAAK,cAAnB,EAAmC;AACtC,iBAAON,QAAQ,CAACS,gBAAT,CAA0BK,WAAjC;AACH,SAFM,MAEA,IAAIR,UAAU,KAAK,aAAnB,EAAkC;AACrC,iBAAON,QAAQ,CAACS,gBAAT,CAA0BM,IAAjC;AACH,SAFM,MAEA,IAAIT,UAAU,KAAK,WAAnB,EAAgC;AACnC,iBAAON,QAAQ,CAACS,gBAAT,CAA0BO,SAAjC;AACH;AACJ;AACJ,KArBe;AAsBhBC,IAAAA,eAAe,EAAE,MAAM;AAEnB,UAAIjB,QAAQ,CAACK,IAAb,EAAmB;AACf,YAAIL,QAAQ,CAACkB,cAAb,EAA6B;AAEzB,gBAAMC,UAAU,GAAGnB,QAAQ,CAACkB,cAAT,CAAwBE,GAAxB,CAA4B,CAACf,IAAD,EAAOgB,CAAP,KAAa;AAIxD,kBAAMC,QAAQ,GAAGjB,IAAI,CAACkB,EAAL,CAAQC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAjB;;AAGA,gBAAIF,QAAQ,KAAK,KAAjB,EAAwB;AACpB,qBAAOtB,QAAQ,CAACyB,SAAT,CAAmBC,IAA1B;AACH,aAFD,MAEO,IAAIJ,QAAQ,KAAK,KAAjB,EAAwB;AAC3B,qBAAOtB,QAAQ,CAACyB,SAAT,CAAmBE,KAA1B;AACH,aAFM,MAEA,IAAIL,QAAQ,KAAK,WAAjB,EAA8B;AACjC,qBAAOtB,QAAQ,CAACyB,SAAT,CAAmBG,SAA1B;AACH,aAFM,MAEA,IAAIN,QAAQ,KAAK,SAAjB,EAA4B;AAC/B,qBAAOtB,QAAQ,CAACyB,SAAT,CAAmBI,OAA1B;AACH,aAFM,MAEA,IAAIP,QAAQ,KAAK,MAAjB,EAAyB;AAC5B,qBAAOtB,QAAQ,CAACyB,SAAT,CAAmBK,IAA1B;AACH,aAFM,MAEA,IAAIR,QAAQ,KAAK,QAAjB,EAA2B;AAC9B,qBAAOtB,QAAQ,CAACyB,SAAT,CAAmBM,MAA1B;AACH,aAFM,MAEA,IAAIT,QAAQ,KAAK,KAAjB,EAAwB;AAC3B,qBAAOtB,QAAQ,CAACyB,SAAT,CAAmBO,SAA1B;AACH;AACJ,WAtBkB,CAAnB;AAwBA,iBAAOb,UAAP;AAEH;AACJ;AACJ,KAvDe;AAwDhBc,IAAAA,cAAc,EAAE,MAAM,CAErB;AA1De,GAApB;AA6DA,QAAMC,YAAY,GAAG;AAEjBC,IAAAA,MAAM,EAAE,MAAM;AACV,UAAInC,QAAQ,CAACK,IAAb,EAAmB;AACf,YAAIL,QAAQ,CAACK,IAAT,CAAc+B,GAAlB,EAAuB;AACnB,gBAAM;AAACC,YAAAA;AAAD,cAAUrC,QAAQ,CAACK,IAAT,CAAc+B,GAA9B;AACApC,UAAAA,QAAQ,CAACsC,UAAT,CAAoBD,KAApB;AACH;AACJ;AACJ,KATgB;AAUjBE,IAAAA,OAAO,EAAE;AACLnC,MAAAA,SAAS,EAAE,MAAM,CAEhB,CAHI;AAILoC,MAAAA,OAAO,EAAE,MAAM;AACX,YAAIxC,QAAQ,CAACK,IAAb,EAAmB;AACf,cAAIL,QAAQ,CAACK,IAAT,CAAc+B,GAAlB,EAAuB;AACnB,kBAAM;AAACC,cAAAA;AAAD,gBAAUrC,QAAQ,CAACK,IAAT,CAAc+B,GAA9B;AACA,mBAAOC,KAAK,CAACI,WAAN,EAAP;AACH;AACJ;AACJ,OAXI;AAYLC,MAAAA,SAAS,EAAE,MAAM;AACb,YAAI1C,QAAQ,CAACK,IAAb,EAAmB;AACf,cAAIL,QAAQ,CAACkB,cAAb,EAA6B;AAEzB,mBAAOlB,QAAQ,CAACkB,cAAT,CAAwByB,MAA/B;AACH;AACJ;AACJ,OAnBI;AAoBLC,MAAAA,SAAS,EAAE,MAAM;AACb,YAAI5C,QAAQ,CAACK,IAAb,EAAmB;AACf,cAAIL,QAAQ,CAACkB,cAAb,EAA6B;AACzB,kBAAM2B,MAAM,GAAG7C,QAAQ,CAACkB,cAAT,CAAwBE,GAAxB,CAA4B,CAACf,IAAD,EAAOgB,CAAP,KAAa;AACpD,kBAAIhB,IAAI,CAACyC,MAAL,CAAYC,QAAhB,EAA0B;AACtB,uBAAO1C,IAAI,CAACyC,MAAL,CAAYC,QAAnB;AACH,eAFD,MAEO;AACH,uBAAO1C,IAAI,CAACyC,MAAL,CAAYE,IAAnB;AACH;AACJ,aANc,CAAf;AAQA,mBAAOH,MAAP;AACH;AACJ;AACJ,OAlCI;AAmCLI,MAAAA,SAAS,EAAE,MAAM;AACb,YAAIjD,QAAQ,CAACK,IAAb,EAAmB;AACf,cAAIL,QAAQ,CAACkB,cAAb,EAA6B;AACzB,kBAAM2B,MAAM,GAAG7C,QAAQ,CAACkB,cAAT,CAAwBE,GAAxB,CAA4B,CAACf,IAAD,EAAOgB,CAAP,KAAa;AAEpD,oBAAM6B,UAAU,GAAG7C,IAAI,CAACE,MAAL,CAAYC,YAA/B;;AAEA,kBAAG0C,UAAU,KAAK,UAAlB,EAA8B;AAC1B,uBAAOlD,QAAQ,CAACS,gBAAT,CAA0BC,QAAjC;AACH,eAFD,MAEO,IAAIwC,UAAU,KAAK,MAAnB,EAA2B;AAC9B,uBAAOlD,QAAQ,CAACS,gBAAT,CAA0BE,IAAjC;AACH,eAFM,MAEA,IAAIuC,UAAU,KAAK,MAAnB,EAA2B;AAC9B,uBAAOlD,QAAQ,CAACS,gBAAT,CAA0BG,IAAjC;AACH,eAFM,MAEA,IAAIsC,UAAU,KAAK,aAAnB,EAAkC;AACrC,uBAAOlD,QAAQ,CAACS,gBAAT,CAA0BI,UAAjC;AACH,eAFM,MAEA,IAAIqC,UAAU,KAAK,cAAnB,EAAmC;AACtC,uBAAOlD,QAAQ,CAACS,gBAAT,CAA0BK,WAAjC;AACH,eAFM,MAEA,IAAIoC,UAAU,KAAK,aAAnB,EAAkC;AACrC,uBAAOlD,QAAQ,CAACS,gBAAT,CAA0BM,IAAjC;AACH,eAFM,MAEA,IAAImC,UAAU,KAAK,WAAnB,EAAgC;AACnC,uBAAOlD,QAAQ,CAACS,gBAAT,CAA0BO,SAAjC;AACH;AAEJ,aApBc,CAAf;AAsBA,mBAAO6B,MAAP;AACH;AACJ;AACJ,OA/DI;AAgELM,MAAAA,WAAW,EAAE,MAAM;AACf,YAAInD,QAAQ,CAACK,IAAb,EAAmB;AACf,cAAIL,QAAQ,CAACkB,cAAb,EAA6B;AACzB,kBAAMkC,IAAI,GAAGpD,QAAQ,CAACkB,cAAT,CAAwBE,GAAxB,CAA4B,CAACf,IAAD,EAAOgB,CAAP,KAAa;AAClD,oBAAM;AAAC+B,gBAAAA;AAAD,kBAAS/C,IAAf;AACA,oBAAMgD,UAAU,GAAG,MAAnB;AACA,oBAAMC,SAAS,GAAG,KAAlB;;AAEA,kBAAID,UAAU,CAACE,IAAX,CAAgBH,IAAhB,CAAJ,EAA2B;AAEvB,sBAAMI,kBAAkB,GAAGJ,IAAI,CAACK,UAAL,CAAgBJ,UAAhB,EAA4B,GAA5B,EAAiCK,WAAjC,EAA3B;AACA,uBAAOF,kBAAP;AAEH,eALD,MAKO,IAAIF,SAAS,CAACC,IAAV,CAAeH,IAAf,CAAJ,EAA0B;AAE7B,sBAAMO,iBAAiB,GAAGP,IAAI,CAACK,UAAL,CAAgBH,SAAhB,EAA2B,GAA3B,EAAgCI,WAAhC,EAA1B;AACA,uBAAOC,iBAAP;AAEH,eALM,MAKA;AACH,uBAAOP,IAAI,CAACM,WAAL,EAAP;AACH;AACJ,aAlBY,CAAb;AAmBA,mBAAON,IAAP;AACH;AACJ;AACJ;AAzFI;AAVQ,GAArB;AAuGA3D,EAAAA,SAAS,CAAC,MAAM;AACZyC,IAAAA,YAAY,CAACC,MAAb;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,sBAAd;AAAA,8CACgB;AAAM,QAAA,KAAK,EAAE;AAACyB,UAAAA,KAAK,EAAE;AAAR,SAAb;AAAA,mBAAkC1B,YAAY,CAACK,OAAb,CAAqBC,OAArB,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,cADhB,QAC+FN,YAAY,CAACK,OAAb,CAAqBG,SAArB,EAD/F;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA,gBACK1C,QAAQ,CAACkB,cAAT,IAA2BgB,YAAY,CAACK,OAAb,CAAqBK,SAArB,GAAiCxB,GAAjC,CAAqC,CAACf,IAAD,EAAOgB,CAAP,KAAa;AAE1E,YAAIA,CAAC,GAAG,CAAR,EAAW;AAEP,8BAAQ,QAAC,IAAD;AAAM,YAAA,EAAE,EAAG,IAAGlB,WAAW,CAACc,eAAZ,GAA8BI,CAA9B,CAAiC,IAAGa,YAAY,CAACK,OAAb,CAAqBY,WAArB,GAAmC9B,CAAnC,CAAsC,EAAxF;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,kCAAf;AAAA,qCACI;AAAK,gBAAA,GAAG,EAAEhB,IAAV;AAAgB,gBAAA,SAAS,EAAC,oBAA1B;AAA+C,gBAAA,KAAK,EAAE6B,YAAY,CAACK,OAAb,CAAqBU,SAArB,GAAiC5B,CAAjC;AAAtD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAAR;AAKH;AACJ,OAV2B;AADhC;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAlMD;;GAAMvB,O;;KAAAA,O;AAuMN,eAAeA,OAAf","sourcesContent":["import ItemContext from '../../../../context/ItemContext/ItemContext'\r\nimport './ItemSet.css'\r\nimport {useEffect, useState, useContext} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Item from '../../../Item';\r\n\r\nconst ItemSet = ({key}) => {\r\n\r\n    const iContext = useContext(ItemContext);\r\n\r\n    const [dummy, setDummy] = useState(0)\r\n    const BoilerPlate = {\r\n        CardStyle: () => {\r\n            if (iContext.item) {\r\n                const itemrarity = iContext.item.rarity.displayValue;\r\n                \r\n                if(itemrarity === 'Uncommon') {\r\n                    return iContext.CardRarityStyles.uncommon;\r\n                } else if (itemrarity === 'Epic') {\r\n                    return iContext.CardRarityStyles.epic;\r\n                } else if (itemrarity === 'Rare') {\r\n                    return iContext.CardRarityStyles.rare;\r\n                } else if (itemrarity === 'Icon Series') {\r\n                    return iContext.CardRarityStyles.iconseries;\r\n                } else if (itemrarity === 'Slurp Series') {\r\n                    return iContext.CardRarityStyles.slurpseries;\r\n                } else if (itemrarity === 'DARK SERIES') {\r\n                    return iContext.CardRarityStyles.dark;\r\n                } else if (itemrarity === 'Legendary') {\r\n                    return iContext.CardRarityStyles.legendary;\r\n                }\r\n            }\r\n        },\r\n        SetLinkByIDType: () => {\r\n\r\n            if (iContext.item) {\r\n                if (iContext.ItemsOfSameSet) {\r\n\r\n                    const returntype = iContext.ItemsOfSameSet.map((item, i) => {\r\n\r\n                        \r\n\r\n                        const itemtype = item.id.split('_')[0];\r\n\r\n                        \r\n                        if (itemtype === 'CID') {\r\n                            return iContext.ItemTypes.skin;\r\n                        } else if (itemtype === 'EID') {\r\n                            return iContext.ItemTypes.emote;\r\n                        } else if (itemtype === 'MusicPack') {\r\n                            return iContext.ItemTypes.musicpack;\r\n                        } else if (itemtype === 'Pickaxe') {\r\n                            return iContext.ItemTypes.pickaxe;\r\n                        } else if (itemtype === 'Wrap') {\r\n                            return iContext.ItemTypes.wrap;\r\n                        } else if (itemtype === 'Glider') {\r\n                            return iContext.ItemTypes.glider;\r\n                        } else if (itemtype === 'BID') {\r\n                            return iContext.ItemTypes.backbling\r\n                        }\r\n                    })\r\n\r\n                    return returntype;\r\n\r\n                }\r\n            }\r\n        },\r\n        useForceUpdate: () => {\r\n            \r\n        }\r\n    }\r\n\r\n    const SetFunctions = {\r\n\r\n        GetSet: () => {\r\n            if (iContext.item) {\r\n                if (iContext.item.set) {\r\n                    const {value} = iContext.item.set;    \r\n                    iContext.GetItemSet(value);\r\n                }\r\n            }\r\n        },\r\n        SetInfo: {\r\n            CardStyle: () => {\r\n                \r\n            },\r\n            SetName: () => {\r\n                if (iContext.item) {\r\n                    if (iContext.item.set) {\r\n                        const {value} = iContext.item.set;    \r\n                        return value.toUpperCase()\r\n                    }\r\n                }\r\n            },\r\n            SetLength: () => {\r\n                if (iContext.item) {\r\n                    if (iContext.ItemsOfSameSet) {\r\n   \r\n                        return iContext.ItemsOfSameSet.length;\r\n                    }\r\n                }\r\n            },\r\n            SetImages: () => {\r\n                if (iContext.item) {\r\n                    if (iContext.ItemsOfSameSet) {\r\n                        const Images = iContext.ItemsOfSameSet.map((item, i) => {\r\n                            if (item.images.featured) {\r\n                                return item.images.featured;\r\n                            } else {\r\n                                return item.images.icon;\r\n                            }\r\n                        })\r\n\r\n                        return Images\r\n                    }\r\n                }\r\n            },\r\n            SetRarity: () => {\r\n                if (iContext.item) {\r\n                    if (iContext.ItemsOfSameSet) {\r\n                        const Images = iContext.ItemsOfSameSet.map((item, i) => {\r\n                            \r\n                            const raritytype = item.rarity.displayValue;\r\n                            \r\n                            if(raritytype === 'Uncommon') {\r\n                                return iContext.CardRarityStyles.uncommon;\r\n                            } else if (raritytype === 'Epic') {\r\n                                return iContext.CardRarityStyles.epic;\r\n                            } else if (raritytype === 'Rare') {\r\n                                return iContext.CardRarityStyles.rare;\r\n                            } else if (raritytype === 'Icon Series') {\r\n                                return iContext.CardRarityStyles.iconseries;\r\n                            } else if (raritytype === 'Slurp Series') {\r\n                                return iContext.CardRarityStyles.slurpseries;\r\n                            } else if (raritytype === 'DARK SERIES') {\r\n                                return iContext.CardRarityStyles.dark;\r\n                            } else if (raritytype === 'Legendary') {\r\n                                return iContext.CardRarityStyles.legendary;\r\n                            }\r\n                            \r\n                        })\r\n\r\n                        return Images\r\n                    }\r\n                }\r\n            },\r\n            SetItemName: () => {\r\n                if (iContext.item) {\r\n                    if (iContext.ItemsOfSameSet) {\r\n                        const name = iContext.ItemsOfSameSet.map((item, i) => {\r\n                            const {name} = item;\r\n                            const spaceregex = /\\s/gi;\r\n                            const dashregex = /-/gi;\r\n\r\n                            if (spaceregex.test(name)) {   \r\n                        \r\n                                const SpaceReplaceResult = name.replaceAll(spaceregex, '-').toLowerCase()\r\n                                return SpaceReplaceResult;\r\n                    \r\n                            } else if (dashregex.test(name)) { \r\n                    \r\n                                const DashReplaceResult = name.replaceAll(dashregex, '~').toLowerCase()\r\n                                return DashReplaceResult\r\n                    \r\n                            } else {\r\n                                return name.toLowerCase();\r\n                            }\r\n                        })\r\n                        return name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        SetFunctions.GetSet();\r\n    }, [])\r\n\r\n    return (\r\n        <div className='itemsetsection itemsetsection--primary'>\r\n            <h2 className=\"itemsetsection__head\">\r\n                PART OF THE <span style={{color: '#ffe227'}}>{SetFunctions.SetInfo.SetName()} SET</span> ({SetFunctions.SetInfo.SetLength()})\r\n            </h2>\r\n            <div className=\"itemset itemset--primary\">\r\n                {iContext.ItemsOfSameSet && SetFunctions.SetInfo.SetImages().map((item, i) => {\r\n\r\n                    if (i < 6) {\r\n\r\n                        return  <Link to={`/${BoilerPlate.SetLinkByIDType()[i]}/${SetFunctions.SetInfo.SetItemName()[i]}`} >\r\n                                    <div className='setitemcard setitemcard--primary'>\r\n                                        <img src={item} className='setitemcard__image' style={SetFunctions.SetInfo.SetRarity()[i]} />\r\n                                    </div>\r\n                                </Link>\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default ItemSet;"]},"metadata":{},"sourceType":"module"}